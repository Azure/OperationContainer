// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: operationcontainer.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OperationContainer_SayHello_FullMethodName              = "/OperationContainer.OperationContainer/SayHello"
	OperationContainer_CreateOperationStatus_FullMethodName = "/OperationContainer.OperationContainer/CreateOperationStatus"
	OperationContainer_GetOperationStatus_FullMethodName    = "/OperationContainer.OperationContainer/GetOperationStatus"
	OperationContainer_UpdateOperationStatus_FullMethodName = "/OperationContainer.OperationContainer/UpdateOperationStatus"
	OperationContainer_GetOperationEntity_FullMethodName    = "/OperationContainer.OperationContainer/GetOperationEntity"
)

// OperationContainerClient is the client API for OperationContainer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The greeting service definition.
type OperationContainerClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	// Creates a new operation status in the database.
	CreateOperationStatus(ctx context.Context, in *CreateOperationStatusRequest, opts ...grpc.CallOption) (*CreateOperationStatusResponse, error)
	// Gets the status of an operation.
	GetOperationStatus(ctx context.Context, in *GetOperationStatusRequest, opts ...grpc.CallOption) (*GetOperationStatusResponse, error)
	// Updates the status of an operation.
	UpdateOperationStatus(ctx context.Context, in *UpdateOperationStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Retrives an entity.
	GetOperationEntity(ctx context.Context, in *GetOperationEntityRequest, opts ...grpc.CallOption) (*GetOperationEntityResponse, error)
}

type operationContainerClient struct {
	cc grpc.ClientConnInterface
}

func NewOperationContainerClient(cc grpc.ClientConnInterface) OperationContainerClient {
	return &operationContainerClient{cc}
}

func (c *operationContainerClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, OperationContainer_SayHello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationContainerClient) CreateOperationStatus(ctx context.Context, in *CreateOperationStatusRequest, opts ...grpc.CallOption) (*CreateOperationStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOperationStatusResponse)
	err := c.cc.Invoke(ctx, OperationContainer_CreateOperationStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationContainerClient) GetOperationStatus(ctx context.Context, in *GetOperationStatusRequest, opts ...grpc.CallOption) (*GetOperationStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOperationStatusResponse)
	err := c.cc.Invoke(ctx, OperationContainer_GetOperationStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationContainerClient) UpdateOperationStatus(ctx context.Context, in *UpdateOperationStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OperationContainer_UpdateOperationStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationContainerClient) GetOperationEntity(ctx context.Context, in *GetOperationEntityRequest, opts ...grpc.CallOption) (*GetOperationEntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOperationEntityResponse)
	err := c.cc.Invoke(ctx, OperationContainer_GetOperationEntity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OperationContainerServer is the server API for OperationContainer service.
// All implementations must embed UnimplementedOperationContainerServer
// for forward compatibility.
//
// The greeting service definition.
type OperationContainerServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	// Creates a new operation status in the database.
	CreateOperationStatus(context.Context, *CreateOperationStatusRequest) (*CreateOperationStatusResponse, error)
	// Gets the status of an operation.
	GetOperationStatus(context.Context, *GetOperationStatusRequest) (*GetOperationStatusResponse, error)
	// Updates the status of an operation.
	UpdateOperationStatus(context.Context, *UpdateOperationStatusRequest) (*emptypb.Empty, error)
	// Retrives an entity.
	GetOperationEntity(context.Context, *GetOperationEntityRequest) (*GetOperationEntityResponse, error)
	mustEmbedUnimplementedOperationContainerServer()
}

// UnimplementedOperationContainerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOperationContainerServer struct{}

func (UnimplementedOperationContainerServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedOperationContainerServer) CreateOperationStatus(context.Context, *CreateOperationStatusRequest) (*CreateOperationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOperationStatus not implemented")
}
func (UnimplementedOperationContainerServer) GetOperationStatus(context.Context, *GetOperationStatusRequest) (*GetOperationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperationStatus not implemented")
}
func (UnimplementedOperationContainerServer) UpdateOperationStatus(context.Context, *UpdateOperationStatusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOperationStatus not implemented")
}
func (UnimplementedOperationContainerServer) GetOperationEntity(context.Context, *GetOperationEntityRequest) (*GetOperationEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperationEntity not implemented")
}
func (UnimplementedOperationContainerServer) mustEmbedUnimplementedOperationContainerServer() {}
func (UnimplementedOperationContainerServer) testEmbeddedByValue()                            {}

// UnsafeOperationContainerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OperationContainerServer will
// result in compilation errors.
type UnsafeOperationContainerServer interface {
	mustEmbedUnimplementedOperationContainerServer()
}

func RegisterOperationContainerServer(s grpc.ServiceRegistrar, srv OperationContainerServer) {
	// If the following call pancis, it indicates UnimplementedOperationContainerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OperationContainer_ServiceDesc, srv)
}

func _OperationContainer_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationContainerServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperationContainer_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationContainerServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperationContainer_CreateOperationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOperationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationContainerServer).CreateOperationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperationContainer_CreateOperationStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationContainerServer).CreateOperationStatus(ctx, req.(*CreateOperationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperationContainer_GetOperationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationContainerServer).GetOperationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperationContainer_GetOperationStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationContainerServer).GetOperationStatus(ctx, req.(*GetOperationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperationContainer_UpdateOperationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOperationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationContainerServer).UpdateOperationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperationContainer_UpdateOperationStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationContainerServer).UpdateOperationStatus(ctx, req.(*UpdateOperationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperationContainer_GetOperationEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperationEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationContainerServer).GetOperationEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperationContainer_GetOperationEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationContainerServer).GetOperationEntity(ctx, req.(*GetOperationEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OperationContainer_ServiceDesc is the grpc.ServiceDesc for OperationContainer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OperationContainer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "OperationContainer.OperationContainer",
	HandlerType: (*OperationContainerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _OperationContainer_SayHello_Handler,
		},
		{
			MethodName: "CreateOperationStatus",
			Handler:    _OperationContainer_CreateOperationStatus_Handler,
		},
		{
			MethodName: "GetOperationStatus",
			Handler:    _OperationContainer_GetOperationStatus_Handler,
		},
		{
			MethodName: "UpdateOperationStatus",
			Handler:    _OperationContainer_UpdateOperationStatus_Handler,
		},
		{
			MethodName: "GetOperationEntity",
			Handler:    _OperationContainer_GetOperationEntity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "operationcontainer.proto",
}
